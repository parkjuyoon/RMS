<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.ktds.targetai.mapper.PkgMapper">

	<!-- package 리스트 조회 -->
	<select id="getPkgList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			P.PKG_ID,
		    P.PKG_NM,
		    P.DRL_NM,
		    P.DRL_SOURCE,
		    P.DIALECT,
		    P.PATH,
		    P.REG_USRID,
		    M.MEMBER_NAME REG_USRNM,
		    DATE_FORMAT(P.REG_DT, '%Y-%m-%d %h:%i:%s') AS REG_DT,
		    PKG_DSC,
		    DATE_FORMAT(P.UDT_DT, '%Y-%m-%d %h:%i:%s') AS UDT_DT,
		    P.UDT_USRID,
		    M1.MEMBER_NAME UDT_USRNM
		FROM 
			targetai.PKG P
			LEFT JOIN targetai.MEMBER M ON (P.REG_USRID = M.MEMBER_ID)
		    LEFT JOIN targetai.MEMBER M1 ON (P.UDT_USRID = M1.MEMBER_ID)
		WHERE 1=1
		<if test="pkgId_search != null and pkgId_search != ''">AND PKG_ID = #{pkgId_search}</if>
		<if test="pkgNm_search != null and pkgNm_search != ''">AND PKG_NM LIKE CONCAT('%', #{pkgNm_search}, '%')</if>
		<if test="pkgRegUsrId_search != null and pkgRegUsrId_search != ''">AND REG_USRID = #{pkgRegUsrId_search}</if>
		ORDER BY PKG_ID DESC
		LIMIT #{limit}
		OFFSET #{offset}
	</select>
	
	<!-- package 조회된 개수 조회 -->
	<select id="getPkgCount" parameterType="java.util.HashMap" resultType="int">
		SELECT 
			COUNT(*) AS CNT
		FROM targetai.PKG
		WHERE 1=1
		<if test="pkgId_search != null and pkgId_search != ''">AND PKG_ID = #{pkgId_search}</if>
		<if test="pkgNm_search != null and pkgNm_search != ''">AND PKG_NM LIKE CONCAT('%', #{pkgNm_search}, '%')</if>
		<if test="pkgRegUsrId_search != null and pkgRegUsrId_search != ''">AND REG_USRID = #{pkgRegUsrId_search}</if>
	</select>
	
	<!-- package 상세 조회 -->
	<select id="getPkg" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			P.PKG_ID,
			P.PKG_NM,
			P.DRL_NM,
			P.DRL_SOURCE,
			P.DIALECT,
			P.PATH,
			P.REG_USRID,
			M.MEMBER_NAME REG_USRNM,
			DATE_FORMAT(P.REG_DT, '%Y-%m-%d %h:%i:%s') AS REG_DT,
			P.PKG_DSC,
			DATE_FORMAT(UDT_DT, '%Y-%m-%d %h:%i:%s') AS UDT_DT,
			P.UDT_USRID,
			M1.MEMBER_NAME UDT_USRNM,
		    (SELECT COUNT(*) FROM targetai.PKG_RULE_MAPPING WHERE PKG_ID = P.PKG_ID) AS RULE_COUNT_IN_PKG
		FROM 
			targetai.PKG P
			LEFT JOIN targetai.MEMBER M ON (P.REG_USRID = M.MEMBER_ID)
		    LEFT JOIN targetai.MEMBER M1 ON (P.UDT_USRID = M1.MEMBER_ID)
		WHERE
			PKG_ID = #{pkgId}
	</select>
	
	<!-- package 삭제 -->
	<delete id="deletePkgById" parameterType="java.util.HashMap">
		DELETE FROM targetai.PKG
		WHERE
			PKG_ID IN 
		<foreach collection="pkgIdArr" item="pkgId" separator="," open="(" close=")">
			#{pkgId}
		</foreach>
	</delete>
	
	<!-- PKG 이름 중복체크 -->
	<select id="pkgNmCheck" parameterType="java.util.HashMap" resultType="int">
		SELECT 
		    COUNT(*)
		FROM
		    targetai.PKG P
		WHERE
		    P.PKG_NM = #{pkgNm}
		<if test="pkgId != ''">AND P.PKG_ID != #{pkgId}</if>    
	</select>
	
	<!-- PKG 저장 -->
	<insert id="addPkg" parameterType="java.util.HashMap">
		INSERT INTO targetai.PKG (
			PKG_NM,
			PKG_DSC,
			PATH,
			REG_USRID
		) VALUES (
			#{pkgNm},
			#{pkgDsc},
			#{PATH},
			#{REG_USER_ID}
		)
		<selectKey keyProperty="PKG_ID" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<!-- PKG 저장시 DRL 파일명 업데이트 -->
	<update id="updatePkg" parameterType="java.util.HashMap">
		UPDATE targetai.PKG
		SET
			PKG_NM = #{pkgNm},
			PKG_DSC = #{pkgDsc},
			UDT_USRID = #{REG_USER_ID},
			UDT_DT = NOW()
		WHERE
			PKG_ID = #{pkgId}
	</update>
	
	<!-- PKG 저장시 DRL 파일명 업데이트 -->
	<update id="updateDrlFileNm" parameterType="java.util.HashMap">
		UPDATE targetai.PKG
		SET
			DRL_NM = #{drlNm}
		WHERE
			PKG_ID = #{PKG_ID}
	</update>
	
	<!-- PKG 정보 조회 -->
	<select id="getPkgById" parameterType="string" resultType="java.util.HashMap">
		SELECT
			PKG_ID,
		    PKG_NM,
		    DRL_NM,
		    DRL_SOURCE,
		    DIALECT,
		    PATH
		FROM
			targetai.PKG
		WHERE
			PKG_ID = #{pkgId}
	</select>
	
	<!-- PKG 의 DRL_SOURCE 업데이트 -->
	<update id="updateDrlSource" parameterType="java.util.HashMap">
		UPDATE targetai.PKG
		SET
			DRL_SOURCE = #{DRL_SOURCE}
		WHERE
			PKG_ID = #{PKG_ID}
	</update>
	
	<!-- RULE TEST OPEN 팝업 내 RULE 속성 -->
	<select id="getRuleAttrByPkgId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
			R.RULE_ID,
			R.RULE_NM,
		    R.SALIENCE,
			RA.FACTOR_GRP_NM,
			RA.FACTOR_NM,
			RA.FACTOR_NM_EN,
			RA.FACTOR_VAL,
			RA.LOGICAL,
			RA.RELATION,
			RA.ATTR_WHEN_CONTENTS
		FROM
			targetai.PKG P
		    LEFT JOIN targetai.RULE R ON (P.PKG_ID = R.PKG_ID)
		    LEFT JOIN targetai.RULE_ATTR RA ON (R.RULE_ID = RA.RULE_ID)
		WHERE
			R.PKG_ID = #{pkgId}
		ORDER BY SALIENCE ASC, RULE_ID ASC, RULE_ATTR_ID ASC
	</select>
	
	<!-- 패키지와 연결 가능한 RULE 목록 조회 -->
	<select id="getConRuleList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			RULE_ID,
			RULE_NM
		FROM
			targetai.RULE
		<if test="!mappingRuleList.isEmpty()">
		WHERE
			RULE_ID NOT IN
			<foreach collection="mappingRuleList" item="list" open="(" close=")" separator=",">
				#{list.RULE_ID}								
			</foreach>
		</if>
	</select>
	
	<!-- 맵핑된 RULE 목록 조회 -->
	<select id="getMappingRuleList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
		    PRM.PKG_RULE_MAPPING_ID,
		    PRM.PKG_ID,
		    R.RULE_ID,
		    R.RULE_NM
		FROM
			targetai.RULE R
		    LEFT JOIN targetai.PKG_RULE_MAPPING PRM ON (PRM.RULE_ID = R.RULE_ID)
		WHERE
			PRM.PKG_ID = #{pkgId}	
	</select>
	
	<delete id="delRuleMappingByPkgId" parameterType="java.util.HashMap">
		DELETE FROM targetai.PKG_RULE_MAPPING
		WHERE
			PKG_ID = #{pkgId}
	</delete>
	
	<!-- 패키지에 연결된 Rule 맵핑 정보 삭제 -->
	<delete id="delRuleMappingByPkgIds" parameterType="java.util.HashMap">
		DELETE FROM targetai.PKG_RULE_MAPPING
		WHERE
			PKG_ID IN 
		<foreach collection="pkgIdArr" item="pkgId" separator="," open="(" close=")">
			#{pkgId}
		</foreach>
	</delete>
	
	<!-- 새로운 Rule 맵핑 연결 (upsert) -->
	<insert id="addRuleMappingByPkgId" parameterType="java.util.HashMap">
		INSERT INTO targetai.PKG_RULE_MAPPING (
			PKG_ID,
			RULE_ID
		) VALUES 
		<foreach collection="mappingRuleIds" item="ruleId" separator=",">
		(
			#{pkgId},
			#{ruleId}
		)
		</foreach>
	</insert>
</mapper>