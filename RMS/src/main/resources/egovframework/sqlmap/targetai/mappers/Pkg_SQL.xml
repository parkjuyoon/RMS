<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.ktds.targetai.mapper.PkgMapper">

	<!-- package 리스트 조회 -->
	<select id="getPkgList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			P.PKG_ID,
		    P.PKG_NM,
		    P.DRL_NM,
		    P.VER,
		    PV.DRL_NM AS DEV_DRL_NM,
		    PV.PKG_VER AS DEV_VER,
		    P.REG_USRID,
		    M.MEMBER_NAME REG_USRNM,
		    DATE_FORMAT(P.REG_DT, '%Y-%m-%d %h:%i:%s') AS REG_DT,
		    P.PKG_DSC,
		    DATE_FORMAT(P.UDT_DT, '%Y-%m-%d %h:%i:%s') AS UDT_DT,
		    P.UDT_USRID,
		    M1.MEMBER_NAME UDT_USRNM
		FROM 
			targetai.PKG P
			LEFT JOIN targetai.PKG_VER PV ON (P.PKG_ID = PV.PKG_ID AND PV.VER_STATUS = 'D')
			LEFT JOIN targetai.MEMBER M ON (P.REG_USRID = M.MEMBER_ID)
		    LEFT JOIN targetai.MEMBER M1 ON (P.UDT_USRID = M1.MEMBER_ID)
		WHERE 1=1
		<if test="pkgId_search != null and pkgId_search != ''">AND P.PKG_ID = #{pkgId_search}</if>
		<if test="pkgNm_search != null and pkgNm_search != ''">AND P.PKG_NM LIKE CONCAT('%', #{pkgNm_search}, '%')</if>
		<if test="pkgRegUsrId_search != null and pkgRegUsrId_search != ''">AND P.REG_USRID = #{pkgRegUsrId_search}</if>
		ORDER BY PKG_ID DESC
		LIMIT #{limit}
		OFFSET #{offset}
	</select>
	
	<!-- package 조회된 개수 조회 -->
	<select id="getPkgCount" parameterType="java.util.HashMap" resultType="int">
		SELECT 
			COUNT(*) AS CNT
		FROM targetai.PKG
		WHERE 1=1
		<if test="pkgId_search != null and pkgId_search != ''">AND PKG_ID = #{pkgId_search}</if>
		<if test="pkgNm_search != null and pkgNm_search != ''">AND PKG_NM LIKE CONCAT('%', #{pkgNm_search}, '%')</if>
		<if test="pkgRegUsrId_search != null and pkgRegUsrId_search != ''">AND REG_USRID = #{pkgRegUsrId_search}</if>
	</select>
	
	<!-- package 상세 조회 -->
	<select id="getPkg" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			P.PKG_ID,
			P.PKG_NM,
			P.DRL_NM,
			P.VER,
			PV.DRL_NM AS CUR_DRL_NM,
			CASE
				WHEN PV.VER_STATUS = 'R' THEN '운영중'
				WHEN PV.VER_STATUS = 'D' THEN '개발중'
				WHEN PV.VER_STATUS = 'T' THEN '종료'
			END AS CUR_VER_STATUS,
			PV.PKG_VER AS CUR_VER,
			P.REG_USRID,
			M.MEMBER_NAME REG_USRNM,
			DATE_FORMAT(P.REG_DT, '%Y-%m-%d %h:%i:%s') AS REG_DT,
			P.PKG_DSC,
			DATE_FORMAT(UDT_DT, '%Y-%m-%d %h:%i:%s') AS UDT_DT,
			P.UDT_USRID,
			M1.MEMBER_NAME UDT_USRNM
		FROM 
			targetai.PKG P
			LEFT JOIN targetai.PKG_VER PV ON (P.PKG_ID = PV.PKG_ID)
			LEFT JOIN targetai.MEMBER M ON (P.REG_USRID = M.MEMBER_ID)
		    LEFT JOIN targetai.MEMBER M1 ON (P.UDT_USRID = M1.MEMBER_ID)
		WHERE
			P.PKG_ID = #{pkgId}
		ORDER BY PV.PKG_VER DESC
        LIMIT 1
	</select>
	
	<!-- 패키지 버전 상세 조회 -->
	<select id="getPkgVer" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			PV.PKG_ID,
			P.PKG_NM,
			PV.PKG_VER,
			PV.VER_DESC,
			PV.DRL_NM,
			CAST(PV.DRL_SOURCE AS CHAR(10000) CHARACTER SET utf8) AS DRL_SOURCE,
			PV.DIALECT,
			PV.PATH,
			PV.VER_STATUS,
			PV.RUN_START_DATE,
			PV.RUN_END_DATE
		FROM
			targetai.PKG_VER PV
			LEFT JOIN targetai.PKG P ON (PV.PKG_ID = P.PKG_ID)
		WHERE
			PV.PKG_ID = #{pkgId}
			AND PV.PKG_VER = #{ver}	
	</select>
		
	<!-- 개발중인 패키지가 있는지 확인 -->
	<select id="getPkgVerByStatus" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			PKG_ID,
		    PKG_VER,
		    VER_DESC,
		    DRL_NM,
		    CAST(DRL_SOURCE AS CHAR(10000) CHARACTER SET utf8) AS DRL_SOURCE,
		    DIALECT,
		    PATH,
		    VER_STATUS,
		    RUN_START_DATE,
		    RUN_END_DATE
		FROM
		    targetai.PKG_VER
		WHERE
		    PKG_ID = #{pkgId} 
		    AND VER_STATUS = #{VER_STATUS}	
	</select>
	
	<!-- package 삭제 -->
	<delete id="deletePkgById" parameterType="java.util.HashMap">
		DELETE FROM targetai.PKG
		WHERE
			PKG_ID IN 
		<foreach collection="pkgIdArr" item="pkgId" separator="," open="(" close=")">
			#{pkgId}
		</foreach>
	</delete>
	
	<!-- PKG_VER 삭제 -->
	<delete id="deletePkgVerById" parameterType="java.util.HashMap">
		DELETE FROM targetai.PKG_VER
		WHERE
			PKG_ID IN 
		<foreach collection="pkgIdArr" item="pkgId" separator="," open="(" close=")">
			#{pkgId}
		</foreach>
	</delete>
	
	<!-- PKG 이름 중복체크 -->
	<select id="pkgNmCheck" parameterType="java.util.HashMap" resultType="int">
		SELECT 
		    COUNT(*)
		FROM
		    targetai.PKG P
		WHERE
		    P.PKG_NM = #{pkgNm}
		<if test="pkgId != ''">AND P.PKG_ID != #{pkgId}</if>    
	</select>
	
	<!-- PKG 저장 -->
	<insert id="addPkg" parameterType="java.util.HashMap">
		INSERT INTO targetai.PKG (
			PKG_NM,
			PKG_DSC,
			REG_USRID,
			REG_DT
		) VALUES (
			#{pkgNm},
			#{pkgDsc},
			#{REG_USER_ID},
			#{currentTime}
		)
		<selectKey keyProperty="PKG_ID" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<!-- PKG_VER 개발버전 추가 -->
	<insert id="addPkgVer" parameterType="java.util.HashMap">
		INSERT INTO targetai.PKG_VER (
			PKG_ID,
			PKG_VER,
			DRL_NM,
			PATH,
			VER_STATUS
		) VALUES (
			#{pkgId},
			#{PKG_VER},
			#{DRL_NM},
			#{PATH},
			#{VER_STATUS}
		)
	</insert>
	
	<!-- PKG 저장시 DRL 파일명 업데이트 -->
	<update id="updatePkg" parameterType="java.util.HashMap">
		UPDATE targetai.PKG
		SET
			PKG_NM = #{pkgNm},
			PKG_DSC = #{pkgDsc},
			UDT_USRID = #{REG_USER_ID},
			UDT_DT = #{currentTime}
		WHERE
			PKG_ID = #{pkgId}
	</update>
	
	<!-- PKG 의 DRL_SOURCE 업데이트 -->
	<update id="updateDrlSource" parameterType="java.util.HashMap">
		UPDATE targetai.PKG_VER
		SET
			DRL_SOURCE = #{DRL_SOURCE}
		WHERE
			PKG_ID = #{PKG_ID}
			AND PKG_VER = #{VER}
	</update>
	
	<!-- 패키지와 연결 가능한 RULE 목록 조회 -->
	<select id="getConRuleList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			RULE_ID,
			DFLT_SALIENCE,
			RULE_NM,
			RULE_VER
		FROM
			targetai.RULE
		WHERE VER_STATUS = 'R'
		<if test="!mappingRuleList.isEmpty()">
			AND RULE_ID NOT IN
			<foreach collection="mappingRuleList" item="list" open="(" close=")" separator=",">
				#{list.RULE_ID}								
			</foreach>
		</if>
		<if test="ruleNm != null and ruleNm != ''">
			AND RULE_NM LIKE CONCAT('%',#{ruleNm},'%')
		</if>
	</select>
	
	<!-- 맵핑된 RULE 목록 조회 -->
	<select id="getMappingRuleList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			R.RULE_ID,
			R.RULE_NM,
			R.DFLT_SALIENCE,
			RP.SALIENCE,
			RP.RULE_VER
		FROM
			targetai.RULE R
			LEFT JOIN targetai.RULE_PKG RP ON (RP.RULE_ID = R.RULE_ID AND RP.RULE_VER = R.RULE_VER)
		WHERE
			RP.PKG_ID = #{pkgId}
		    AND RP.PKG_VER = (
				SELECT 
					PKG_VER
				FROM
					targetai.PKG_VER
				WHERE
					PKG_ID = #{pkgId}
				ORDER BY
					PKG_VER DESC
				LIMIT 1
		    )
		ORDER BY RP.PKG_VER DESC
	</select>
	
	<delete id="delRuleMappingByPkgId" parameterType="java.util.HashMap">
		DELETE FROM targetai.RULE_PKG
		WHERE
			PKG_ID = #{pkgId}
			AND PKG_VER = #{PKG_VER}
	</delete>
	
	<!-- 패키지에 연결된 Rule 맵핑 정보 삭제 -->
	<delete id="delRuleMappingByPkgIds" parameterType="java.util.HashMap">
		DELETE FROM targetai.RULE_PKG
		WHERE
			PKG_ID IN 
		<foreach collection="pkgIdArr" item="pkgId" separator="," open="(" close=")">
			#{pkgId}
		</foreach>
	</delete>
	
	<!-- 새로운 Rule 맵핑 연결 (upsert) -->
	<insert id="addRuleMappingByPkgId" parameterType="java.util.HashMap">
		INSERT INTO targetai.RULE_PKG (
			PKG_ID,
			RULE_ID,
			RULE_VER,
			PKG_VER,
			SALIENCE,
			CREATE_DT,
			CREATOR_ID
		) VALUES 
		<foreach collection="mappingRuleList" item="mappingRule" separator=",">
		(
			#{pkgId},
			#{mappingRule.RULE_ID},
			#{mappingRule.RULE_VER},
			#{PKG_VER},
			#{mappingRule.SALIENCE},
			#{currentTime},
			#{REG_USER_ID}
		)
		</foreach>
	</insert>
	
	<!-- 맵핑된 룰  -->
	<select id="getMappingRuleIdsByPkgId" parameterType="java.util.HashMap" resultType="String">
		SELECT 
			CONCAT(R.RULE_ID, '_', IFNULL(RP.SALIENCE, 1)) AS RULE_SALIENCE
		FROM
			targetai.RULE R
			LEFT JOIN targetai.RULE_PKG RP ON (RP.RULE_ID = R.RULE_ID)
		WHERE
			RP.PKG_ID = #{pkgId}
		    AND RP.PKG_VER = (
				SELECT 
					PKG_VER
				FROM
					targetai.PKG_VER
				WHERE
					PKG_ID = #{pkgId}
				ORDER BY
					PKG_VER DESC
				LIMIT 1
		    )
		ORDER BY PKG_VER DESC
	</select>
	
	<!-- 해당패키지의 버전목록 조회 -->
	<select id="getDeployVerListByPkgId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			PKG_ID,
			PKG_VER,
			VER_DESC,
			DRL_NM,
			DRL_SOURCE,
			DIALECT,
			PATH,
			CASE
				WHEN VER_STATUS = 'R' THEN '운영중'
				WHEN VER_STATUS = 'D' THEN '개발중'
				WHEN VER_STATUS = 'T' THEN '종료'
			END AS VER_STATUS,
			DATE_FORMAT(RUN_START_DATE, '%Y-%m-%d %H:%i:%s') AS RUN_START_DATE,
			DATE_FORMAT(RUN_END_DATE, '%Y-%m-%d %H:%i:%s') AS RUN_END_DATE
		FROM
			targetai.PKG_VER
		WHERE
			PKG_ID = #{pkgId}
		ORDER BY PKG_VER DESC
		LIMIT #{limit}
		OFFSET #{offset}
	</select>
	
	<select id="getDeployVerCountByPkgId" parameterType="java.util.HashMap" resultType="int">
		SELECT 
		    COUNT(*)
		FROM
		    targetai.PKG_VER
		WHERE
			PKG_ID = #{pkgId}
		ORDER BY VER_STATUS DESC, PKG_VER DESC
	</select>
	
	<!-- 운영 배포버전 가동종료 -->
	<update id="endDeployVer" parameterType="java.util.HashMap">
		UPDATE targetai.PKG_VER
		SET
			VER_STATUS = 'T'
			,RUN_END_DATE = #{currentTime}
		WHERE
			PKG_ID = #{pkgId}
			AND VER_STATUS = 'R'
	</update>
	
	<!-- 개발 배포버전으로 가동시작 -->
	<update id="startDeployVer" parameterType="java.util.HashMap">
		UPDATE targetai.PKG_VER
		SET
			VER_STATUS = 'R'
			,RUN_START_DATE = #{currentTime}
		WHERE
			PKG_ID = #{pkgId}
			AND VER_STATUS = 'D'
	</update>
	
	<!-- 개발 배포버전으로 가동시작 -->
	<update id="updatePkgRealVer" parameterType="java.util.HashMap">
		UPDATE targetai.PKG
		SET
			DRL_NM = #{DRL_NM}
			,PATH = #{PATH}
			,VER = #{PKG_VER}
			,UDT_USRID	 = #{REG_USER_ID}
			,UDT_DT	 = #{currentTime}
		WHERE
			PKG_ID = #{PKG_ID}
	</update>
	
	<!-- PKG 의 VER(현재 운영중인 버전) 을 마이너 버전으로 업데이트 한다. -->
	<update id="updatePkgMinerVer" parameterType="java.util.HashMap">
		UPDATE targetai.PKG
		SET
			VER = #{pkgMinerVer},
			DRL_NM = CONCAT(SUBSTRING_INDEX(DRL_NM, '_v', 1), '_v', REPLACE(#{pkgMinerVer}, '.', '_'), '.drl')
		WHERE
			PKG_ID = #{pkgId}
	</update>
	
	<!-- 해당 패키지 버전의 RULE(이벤트) 목록 조회 -->
	<select id="getEventList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT 
			RP.PKG_ID,
		    RP.RULE_ID,
		    RP.RULE_VER,
		    RP.PKG_VER,
		    R.RULE_NM,
		    RP.SALIENCE,
		    DATE_FORMAT(R.REG_DT, '%Y-%m-%d %H:%i:%s') AS REG_DT,
		    R.REG_USRID,
		    M.MEMBER_NAME
		FROM
		    targetai.RULE_PKG RP
		    LEFT JOIN targetai.RULE R ON (RP.RULE_ID = R.RULE_ID AND RP.RULE_VER = R.RULE_VER)
		    LEFT JOIN targetai.MEMBER M ON (R.REG_USRID = M.MEMBER_ID)
		WHERE
		    RP.PKG_ID = #{pkgId}
		    AND RP.PKG_VER = #{ver}
		    ORDER BY RP.SALIENCE ASC, R.RULE_ID DESC
	    LIMIT #{limit}
		OFFSET #{offset}
	</select>
	
	<!-- 해당 패키지 버전의 RULE(이벤트) 목록 개수 조회 -->
	<select id="getEventListCount" parameterType="java.util.HashMap" resultType="int">
		SELECT 
		    COUNT(*)
		FROM
		    targetai.RULE_PKG RP
		    LEFT JOIN targetai.RULE R ON (RP.RULE_ID = R.RULE_ID AND RP.RULE_VER = R.RULE_VER)
		    LEFT JOIN targetai.MEMBER M ON (R.REG_USRID = M.MEMBER_ID)
		WHERE
		    RP.PKG_ID = #{pkgId}
		    AND RP.PKG_VER = #{ver}
	</select>
	
	<!-- 개발중인 패키지의 연결된 RULE 이 있는지 확인 -->
	<select id="isConRuleCnt" parameterType="java.util.HashMap" resultType="int">
		SELECT 
		    COUNT(*)
		FROM
		    targetai.RULE_PKG RP
		    LEFT JOIN targetai.PKG_VER PV ON (RP.PKG_ID = PV.PKG_ID AND PV.PKG_VER = RP.PKG_VER)
		WHERE
		    RP.PKG_ID = #{pkgId} 
		    AND PV.VER_STATUS = #{VER_STATUS}
	</select>
	
	<!-- 패키지  마이너 버전 생성 -->
	<insert id="saveDeployMinerVer" parameterType="java.util.HashMap">
		INSERT INTO targetai.PKG_VER
		SELECT 
		    PKG_ID,
		    #{pkgMinerVer},
		    VER_DESC,
		    CONCAT(SUBSTRING_INDEX(DRL_NM, '_v', 1), '_v', REPLACE(#{pkgMinerVer}, '.', '_'), '.drl') AS DRL_NM,
		    DRL_SOURCE,
		    DIALECT,
		    PATH,
		    'R',
		    #{currentTime},
		    RUN_END_DATE
		FROM
		    targetai.PKG_VER PV
		WHERE
		    PV.PKG_ID = #{pkgId}
		    AND PV.PKG_VER = #{pkgVer}
	</insert>
	
	<!-- RULE_PKG 에 RULE 과 PKG 의 연결정보도 저장한다 -->
	<insert id="saveRulePkgConInfo" parameterType="java.util.HashMap">
		INSERT INTO targetai.RULE_PKG (
			PKG_ID,
		    RULE_ID,
		    PKG_VER,
		    RULE_VER,
		    SALIENCE,
		    CREATE_DT,
		    CREATOR_ID
		)
		SELECT 
		    PKG_ID,
		    RULE_ID,
		    #{pkgMinerVer} AS PKG_VER,
		    CASE
				WHEN RULE_ID = #{ruleId} THEN #{ruleDeployVer}
		        ELSE RULE_VER
			END AS RULE_VER,
		    SALIENCE,
		    CREATE_DT,
		    CREATOR_ID
		FROM
		    targetai.RULE_PKG RP
		WHERE
			RP.PKG_ID = #{pkgId}
		    AND RP.PKG_VER = #{pkgVer}
	</insert>
</mapper>